Here are **detailed Python notes** for accessing MongoDB and performing CRUD operations using VS Code and Python:

---

### **Setup**

1. **Install MongoDB**  
   - Download and install MongoDB Community Server:  
     [MongoDB Official Website](https://www.mongodb.com/try/download/community).  
   - Start the MongoDB server by running:
     ```bash
     mongod
     ```

2. **Install VS Code**  
   - Download and install [VS Code](https://code.visualstudio.com/).  
   - Install extensions like:
     - **Python** (by Microsoft).
     - **MongoDB for VS Code** (by MongoDB Inc.).

3. **Install `pymongo`**  
   In the VS Code terminal or system terminal, install the MongoDB Python driver:
   ```bash
   pip install pymongo
   ```

---

### **Connect to MongoDB**

Create a Python file (e.g., `app.py`) and use the following code to connect to MongoDB:

```python
from pymongo import MongoClient

# Connect to MongoDB (replace URI if necessary)
uri = "mongodb://localhost:27017"
client = MongoClient(uri)

# Access database and collection
db = client["testDB"]  # Replace with your database name
collection = db["testCollection"]  # Replace with your collection name

print("Connected to MongoDB!")
```

Run the file:
```bash
python app.py
```

---

### **CRUD Operations in Python**

#### 1. **Create (Insert Documents)**

- **Insert One Document**:
  ```python
  doc = {"name": "Alice", "age": 25, "city": "Wonderland"}
  result = collection.insert_one(doc)
  print(f"Inserted document with _id: {result.inserted_id}")
  ```

- **Insert Many Documents**:
  ```python
  docs = [
      {"name": "Bob", "age": 30},
      {"name": "Charlie", "age": 35},
      {"name": "Diana", "age": 28}
  ]
  result = collection.insert_many(docs)
  print(f"Inserted documents with IDs: {result.inserted_ids}")
  ```

---

#### 2. **Read (Retrieve Documents)**

- **Find All Documents**:
  ```python
  docs = collection.find()
  for doc in docs:
      print(doc)
  ```

- **Find with a Query**:
  ```python
  query = {"age": {"$gte": 30}}  # Find documents where age >= 30
  docs = collection.find(query)
  for doc in docs:
      print(doc)
  ```

- **Find One Document**:
  ```python
  doc = collection.find_one({"name": "Alice"})
  print(doc)
  ```

---

#### 3. **Update (Modify Documents)**

- **Update One Document**:
  ```python
  query = {"name": "Alice"}
  update = {"$set": {"city": "Paris"}}
  result = collection.update_one(query, update)
  print(f"Matched {result.matched_count} document(s), Modified {result.modified_count} document(s)")
  ```

- **Update Many Documents**:
  ```python
  query = {"age": {"$lt": 30}}  # Update documents where age < 30
  update = {"$set": {"status": "young"}}
  result = collection.update_many(query, update)
  print(f"Matched {result.matched_count} document(s), Modified {result.modified_count} document(s)")
  ```

---

#### 4. **Delete (Remove Documents)**

- **Delete One Document**:
  ```python
  query = {"name": "Alice"}
  result = collection.delete_one(query)
  print(f"Deleted {result.deleted_count} document(s)")
  ```

- **Delete Many Documents**:
  ```python
  query = {"age": {"$lt": 30}}
  result = collection.delete_many(query)
  print(f"Deleted {result.deleted_count} document(s)")
  ```

---

### **Advanced Operations**

#### 1. **Indexing**
Indexing improves query performance:
```python
index_name = collection.create_index([("name", 1)])  # 1 for ascending, -1 for descending
print(f"Created index: {index_name}")
```

#### 2. **Aggregation**
Aggregate data for advanced queries:
```python
pipeline = [
    {"$group": {"_id": "$city", "total": {"$sum": 1}}}  # Group by city and count occurrences
]
result = list(collection.aggregate(pipeline))
for doc in result:
    print(doc)
```

#### 3. **Count Documents**
Count the number of documents matching a query:
```python
count = collection.count_documents({"city": "Wonderland"})
print(f"Documents with city 'Wonderland': {count}")
```

---

### **Working with VS Code**

#### 1. **MongoDB Extension**
   - Open the **MongoDB** panel (leaf icon in VS Code).
   - Connect to your MongoDB server using the URI `mongodb://localhost:27017`.
   - Perform operations (insert, update, delete) directly from the extension.

#### 2. **Using Python Interactive**
   - Open a `.py` file.
   - Use Jupyter-like interactive cells in VS Code (`# %%` for cells).
   - Example:
     ```python
     # %%
     from pymongo import MongoClient

     uri = "mongodb://localhost:27017"
     client = MongoClient(uri)
     db = client["testDB"]
     collection = db["testCollection"]
     print("Connected!")

     # %%
     docs = collection.find()
     for doc in docs:
         print(doc)
     ```

---

### **Debugging Tips**

- **Connection Issues**:
  - Ensure MongoDB server is running (`mongod`).
  - Verify the connection string (`mongodb://localhost:27017`).

- **Check Logs**:
  - MongoDB logs are helpful for debugging.
  - Use `print()` statements in Python for runtime debugging.

- **Use MongoDB Compass**:
  - GUI for visualizing and managing your database.

---

### **Example Script**

Hereâ€™s a full example that performs all operations:

```python
from pymongo import MongoClient

# Connect to MongoDB
uri = "mongodb://localhost:27017"
client = MongoClient(uri)
db = client["testDB"]
collection = db["testCollection"]

# Insert
collection.insert_one({"name": "Alice", "age": 25, "city": "Wonderland"})
collection.insert_many([{"name": "Bob", "age": 30}, {"name": "Charlie", "age": 35}])

# Read
print("All documents:")
for doc in collection.find():
    print(doc)

# Update
collection.update_one({"name": "Alice"}, {"$set": {"city": "Paris"}})
print("\nUpdated document:")
print(collection.find_one({"name": "Alice"}))

# Delete
collection.delete_one({"name": "Bob"})
print("\nRemaining documents:")
for doc in collection.find():
    print(doc)

client.close()
```

---

Feel free to ask if you have questions or need help setting this up! ðŸ˜Š